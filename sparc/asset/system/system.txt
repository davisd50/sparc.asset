A System
---------
A system is a service, application, or other entity that has an Id, name,
and description.

Configure components
>>> from sparc.asset import Configure
>>> Configure()

Create a basic system
>>> kwargs = {
... 		  'id': 'my system id',
...           'name': u'A system name',
...           'description': u'a system description',
...			  'type': u'test'
... 		 }

Our first attempt to create the system will fail, because we have not yet
defined our possible system types within a vocabulary 
>>> from zope.component import createObject
>>> from zope.component import ComponentLookupError
>>> from zope.schema.interfaces import ConstraintNotSatisfied
>>> try:
...     createObject(u'sparc.asset.system', **kwargs)
...     assert False
... except (ConstraintNotSatisfied, ComponentLookupError):
... 	pass

Now we'll create a vocabulary of possible system types
>>> from sparc.asset.system.tests import register_system_types_vocab_from_values
>>> register_system_types_vocab_from_values(['test'])

Now, let's try creating our system again
>>> from sparc.asset.system import ISystem
>>> my_system = createObject(u'sparc.asset.system', **kwargs)
>>> my_system.getId()
'my system id'
>>> my_system.name
u'A system name'
>>> my_system.type
u'test'
>>> ISystem.providedBy(my_system)
True

Test a persistence
>>> from persistent.interfaces import IPersistent
>>> my_system = createObject(u'sparc.asset.persistent.system', **kwargs)
>>> IPersistent.providedBy(my_system)
True
>>> ISystem.providedBy(my_system)
True
>>> ISystem.providedBy(my_system)
True